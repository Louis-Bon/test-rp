[project]
name = "raise"
version = "1.5.0"
description = ""
readme = "README.md"

requires-python = "<3.14,>=3.11"
dependencies = [
    "celery==5.5.2",
    "fastapi==0.115.12",
    "fastapi-cli==0.0.7",
    "fsspec==2025.5.1",
    "langchain==0.3.21",
    "langgraph==0.3.21",
    "langchain-anthropic==0.3.10",
    "langchain-aws==0.2.17",
    "langgraph-checkpoint-postgres==2.0.19",
    "langchain-community==0.3.16",
    "langchain-core==0.3.48",
    "langchain-google-genai==2.1.1",
    "langchain-google-vertexai==2.0.16",
    "langchain-mistralai==0.2.9",
    "langchain-openai==0.3.10",
    "langchain-postgres==0.0.13",
    "langfuse<3.0.0,>=2.21.1",
    "litellm==1.65.0",
    "orjson<4.0.0,>=3.9.10",
    "pluggy==1.5.0",
    "psutil==7.0.0",
    "psycopg==3.2.6",
    "psycopg2-binary==2.9.10",
    "psycopg-pool==3.2.6",
    "pydantic==2.11.1",
    "pydantic-settings==2.8.1",
    "pyjwt==2.9.0",
    "python-magic==0.4.27",
    "python-multipart==0.0.20",
    "pytest-env<2.0.0,>=1.1.5",
    "sse-starlette==2.2.1",
    "uvicorn==0.32.0",
    "markitdown[all]==0.1.1",
    "chardet==5.2.0",
    "itsdangerous==2.1.2",
    "authlib==1.3.2",
]

[dependency-groups]
dev = [
    "uvicorn<1.0.0,>=0.32.0",
    "pygithub<3.0.0,>=2.1.1",
    "testcontainers-postgres==0.0.1rc1",
    "pytest-asyncio<1.0.0,>=0.24.0",
    "debugpy==1.8",
]
lint = [
    "ruff<1.0.0,>=0.11.2",
    "codespell<3.0.0,>=2.3.0",
]
test = [
    "pytest<9.0.0,>=8.3.3",
    "pytest-cov<5.0.0,>=4.0.0",
    "pytest-asyncio<1.0.0,>=0.24.0",
    "pytest-socket<1.0.0,>=0.7.0",
    "pytest-watch<5.0.0,>=4.2.0",
    "pytest-timeout<3.0.0,>=2.2.0",
    "pytest-env<2.0.0,>=1.1.3",
]

[tool.ruff]
line-length = 120
include=["app/raiseapp/**/*.py"]
exclude = [
    "tests",
    "extensions",
    # "document_loader",
    "__init__.py",
]

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = ["F", "E", "W", "N", "I", "ANN"]
ignore = [
    "E501", "ANN401",
    # https://docs.astral.sh/ruff/rules/missing-type-self/
    "D100", "D101", "D102", "D103", "D104", "D105", "D106", "D107",
    # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    "W191", "E111", "E114", "E117", "D206", "D300", "Q000", "Q001", "Q002", "Q003", "COM812", "COM819", "ISC001", "ISC002"
]

[tool.ruff.lint.extend-per-file-ignores]
"test_*.py" = [
    # at least this three should be fine in tests:
    "S101", # asserts allowed in tests...
    "ARG", # Unused function args -> fixtures nevertheless are functionally relevant...
    "FBT", # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
    # The below are debateable
    "PLR2004", # Magic value used in comparison, ...
    "S311", # Standard pseudo-random generators are not suitable for cryptographic purposes
]

[tool.coverage.run]
omit = [
    "tests/*",
]

[tool.pytest.ini_options]
pythonpath = [
  "."
]
# --strict-markers will raise errors on unknown marks.
# https://docs.pytest.org/en/7.1.x/how-to/mark.html#raising-errors-on-unknown-marks
#
# https://docs.pytest.org/en/7.1.x/reference/reference.html
# --strict-config       any warnings encountered while parsing the `pytest`
#                       section of the configuration file raise errors.
addopts = "--strict-markers --strict-config --durations=5 -vv"
# Use global timeout of 30 seconds for now.
# Most tests should be closer to ~100 ms, but some of the tests involve
# parsing files. We can adjust on a per test basis later on.
#timeout = 30
#asyncio_mode = "auto"
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope = "function"

[tool.pytest_env]
JWT_SECRET_KEY='random_secret_key'
OIDC_CLIENT_ID='oidc_client_id'
OIDC_CLIENT_SECRET='oidc_client_secret'
OIDC_SERVER_DISCOVERY=''

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"
